<!--Documentation: http://msdn.microsoft.com/en-us/library/ff660914%28v=pandp.20%29.aspx -->
<unity xmlns="http://schemas.microsoft.com/practices/2010/unity">
  <assembly name="crds-angular" />
  <assembly name="Crossroads.AsyncJobs" />
  <assembly name="Crossroads.Utilities" />
  <assembly name="MinistryPlatform.Translation" />
  <assembly name="RestSharp" />
  <assembly name="System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <assembly name="System.Security.Cryptography" />
  <assembly name="GoogleMapsAPI.NET" />

  <container>
    <!-- Main Job Processor - add to the "processors" array below as new job processors are added -->
    <register type="Crossroads.AsyncJobs.Application.JobProcessor">
      <lifetime type="ContainerControlledLifetimeManager" />
      <constructor>
        <param name="processors">
          <array>
            <dependency name="stripeEventQueueProcessor"/>
            <dependency name="checkScannerBatchQueueProcessor"/>
            <dependency name="tripEventQueueProcessor"/>
            <dependency name="signupToServeQueueProcessor" />
          </array>
        </param>
      </constructor>
    </register>

    <!-- Message Queue Factory -->
    <register name="messageQueueFactory" type="Crossroads.Utilities.Messaging.Interfaces.IMessageQueueFactory" mapTo="Crossroads.Utilities.Messaging.MessageQueueFactory"/>

    <!-- Stripe Event queue processor -->
    <register name="stripeEventQueueProcessor" type="Crossroads.AsyncJobs.Application.IQueueProcessor" mapTo="Crossroads.AsyncJobs.Application.QueueProcessor[[crds_angular.Models.Crossroads.Stewardship.StripeEvent]]">
      <lifetime type="ContainerControlledLifetimeManager" />
      <constructor>
        <param name="queueProcessorConfig">
          <dependency name="stripeEventQueueProcessorConfig"/>
        </param>
        <param name="messageQueueFactory">
          <dependency name="messageQueueFactory"/>
        </param>
      </constructor>
    </register>
    <register name="stripeEventQueueProcessorConfig" type="Crossroads.AsyncJobs.Models.QueueProcessorConfig[[crds_angular.Models.Crossroads.Stewardship.StripeEvent]]">
      <lifetime type="ContainerControlledLifetimeManager" />
      <property name="QueueName" value=".\Private$\StripeEvents" />
      <property name="JobExecutor">
        <dependency name="stripeEventProcessor" />
      </property>
    </register>
    <register name="stripeEventProcessor" type="Crossroads.AsyncJobs.Interfaces.IJobExecutor[[crds_angular.Models.Crossroads.Stewardship.StripeEvent]]" mapTo="Crossroads.AsyncJobs.Processors.StripeEventProcessor">
      <lifetime type="ContainerControlledLifetimeManager" />
      <constructor>
        <param name="stripeEventService">
          <dependency name="stripeEventService" />
        </param>
      </constructor>
    </register>
    <register name="stripeEventService" type="crds_angular.Services.Interfaces.IStripeEventService" mapTo="crds_angular.Services.StripeEventService">
      <lifetime type="ContainerControlledLifetimeManager" />
      <constructor>
        <param name="paymentService" />
        <param name="donationService" />
        <param name="mpDonorService" />
        <param name="configuration">
          <dependency type="Crossroads.Utilities.Interfaces.IConfigurationWrapper"/>
        </param>
      </constructor>
    </register>

    <!-- Check scanner batch processor -->
    <register name="checkScannerBatchQueueProcessor" type="Crossroads.AsyncJobs.Application.IQueueProcessor" mapTo="Crossroads.AsyncJobs.Application.QueueProcessor[[crds_angular.Models.Crossroads.Stewardship.CheckScannerBatch]]">
      <lifetime type="ContainerControlledLifetimeManager" />
      <constructor>
        <param name="queueProcessorConfig">
          <dependency name="checkScannerBatchQueueProcessorConfig"/>
        </param>
        <param name="messageQueueFactory">
          <dependency name="messageQueueFactory"/>
        </param>
      </constructor>
    </register>
    <register name="checkScannerBatchQueueProcessorConfig" type="Crossroads.AsyncJobs.Models.QueueProcessorConfig[[crds_angular.Models.Crossroads.Stewardship.CheckScannerBatch]]">
      <lifetime type="ContainerControlledLifetimeManager" />
      <property name="QueueName" value=".\Private$\CheckScannerDonations" />
      <property name="JobExecutor">
        <dependency name="checkScannerBatchProcessor" />
      </property>
    </register>
    <register name="checkScannerBatchProcessor" type="Crossroads.AsyncJobs.Interfaces.IJobExecutor[[crds_angular.Models.Crossroads.Stewardship.CheckScannerBatch]]" mapTo="Crossroads.AsyncJobs.Processors.CheckScannerBatchProcessor">
      <lifetime type="ContainerControlledLifetimeManager" />
      <constructor>
        <param name="checkScannerService" />
        <param name="emailService" />
        <param name="configuration" />
      </constructor>
    </register>
    <register type="crds_angular.Services.Interfaces.ICheckScannerService" mapTo="crds_angular.Services.EzScanCheckScannerService">
      <lifetime type="PerResolveLifetimeManager"/>
      <constructor>
        <param name="checkScannerDao"/>
        <param name="donorService" />
        <param name="paymentService" />
        <param name="mpDonorService" />
      </constructor>
    </register>

    <!-- SignupToServe queue processor-->
    <register name="signupToServeQueueProcessor" type="Crossroads.AsyncJobs.Application.IQueueProcessor" mapTo="Crossroads.AsyncJobs.Application.QueueProcessor[[crds_angular.Models.Crossroads.Serve.SaveRsvpDto]]">
      <lifetime type="ContainerControlledLifetimeManager" />
      <constructor>
        <param name="queueProcessorConfig">
          <dependency name="signupToServeQueueProcessorConfig"/>
        </param>
        <param name="messageQueueFactory">
          <dependency name="messageQueueFactory"/>
        </param>
      </constructor>
    </register>
    <register name="signupToServeQueueProcessorConfig" type="Crossroads.AsyncJobs.Models.QueueProcessorConfig[[crds_angular.Models.Crossroads.Serve.SaveRsvpDto]]">
      <lifetime type="ContainerControlledLifetimeManager" />
      <property name="QueueName" value=".\Private$\SignupToServeEvents" />
      <property name="JobExecutor">
        <dependency name="signupToServeEventProcessor" />
      </property>
    </register>
    <register name="signupToServeEventProcessor" type="Crossroads.AsyncJobs.Interfaces.IJobExecutor[[crds_angular.Models.Crossroads.Serve.SaveRsvpDto]]" mapTo="Crossroads.AsyncJobs.Processors.SignupToServeProcessor" >
      <lifetime type="ContainerControlledLifetimeManager" />
      <constructor>
        <param name="serveService">
          <dependency name="serveService"/>
        </param>
        <param name="configurationWrapper" />
        <param name="authenticationService" />
      </constructor>
    </register>
    <register name="serveService" type="crds_angular.Services.Interfaces.IServeService" mapTo="crds_angular.Services.ServeService">
      <lifetime type="ContainerControlledLifetimeManager" />
      <constructor>
        <param name="contactService" />
        <param name="contactRelationshipService" />
        <param name="opportunityService" />
        <param name="eventService" />
        <param name="participantService" />
        <param name="groupParticipantService" />
        <param name="groupService" />
        <param name="communicationService" />
        <param name="authenticationService" />
        <param name="configurationWrapper" />
        <param name="apiUserService" />
        <param name="responseService" />
      </constructor>
    </register>

    <!-- Trip Event queue processor -->
    <register name="tripEventQueueProcessor" type="Crossroads.AsyncJobs.Application.IQueueProcessor" mapTo="Crossroads.AsyncJobs.Application.QueueProcessor[[crds_angular.Models.Crossroads.Trip.TripApplicationDto]]">
      <lifetime type="ContainerControlledLifetimeManager" />
      <constructor>
        <param name="queueProcessorConfig">
          <dependency name="tripEventQueueProcessorConfig"/>
        </param>
        <param name="messageQueueFactory">
          <dependency name="messageQueueFactory"/>
        </param>
      </constructor>
    </register>
    <register name="tripEventQueueProcessorConfig" type="Crossroads.AsyncJobs.Models.QueueProcessorConfig[[crds_angular.Models.Crossroads.Trip.TripApplicationDto]]">
      <lifetime type="ContainerControlledLifetimeManager" />
      <property name="QueueName" value=".\Private$\TripEvents" />
      <property name="JobExecutor">
        <dependency name="tripEventProcessor" />
      </property>
    </register>
    <register name="tripEventProcessor" type="Crossroads.AsyncJobs.Interfaces.IJobExecutor[[crds_angular.Models.Crossroads.Trip.TripApplicationDto]]" mapTo="Crossroads.AsyncJobs.Processors.TripEventProcessor">
      <lifetime type="ContainerControlledLifetimeManager" />
        <constructor>
          <param name="tripService">
            <dependency name="tripService"/>
          </param>
        </constructor>
    </register>
    <register name="tripService" type="crds_angular.Services.Interfaces.ITripService" mapTo="crds_angular.Services.TripService" />
    <!-- Data Access -->
    <register type="crds_angular.DataAccess.Interfaces.ICheckScannerDao" mapTo="crds_angular.DataAccess.EzScanCheckScannerDao">
      <lifetime type="PerResolveLifetimeManager"/>
      <constructor>
        <param name="dbConnection" dependencyName="ezScanDbConnection" />
      </constructor>
    </register>
    <register name="ezScanDbConnection" type="System.Data.IDbConnection" mapTo="System.Data.SqlClient.SqlConnection">
      <lifetime type="PerResolveLifetimeManager"/>
      <constructor></constructor>
      <property name="ConnectionString">
        <value value="EZSCAN_DB_CONN_STRING"
               typeConverter="Crossroads.Utilities.Services.EnvironmentVariableTypeConverter" />
      </property>
    </register>

    <!-- crds_angular Services -->
    <register type="crds_angular.Services.Interfaces.IAddressService" mapTo="crds_angular.Services.AddressService" />
    <register type="crds_angular.Services.Interfaces.IAttributeService" mapTo="crds_angular.Services.AttributeService" />
    <register type="crds_angular.Services.Interfaces.IBulkEmailSyncService" mapTo="crds_angular.Services.BulkEmailSyncService" />
    <register type="crds_angular.Services.Interfaces.IObjectAttributeService" mapTo="crds_angular.Services.ObjectAttributeService" />
    <register type="crds_angular.Services.Interfaces.IDonationService" mapTo="crds_angular.Services.DonationService" />
    <register type="crds_angular.Services.Interfaces.IDonorService" mapTo="crds_angular.Services.DonorService" />
    <register type="crds_angular.Services.Interfaces.IDonorStatementService" mapTo="crds_angular.Services.DonorStatementService" />
    <register type="crds_angular.Services.Interfaces.IEmailCommunication" mapTo="crds_angular.Services.EmailCommunication" />
    <register type="crds_angular.Services.Interfaces.IPersonService" mapTo="crds_angular.Services.PersonService" />
    <register type="crds_angular.Services.Interfaces.IServeService" mapTo="crds_angular.Services.ServeService" />
    <register type="crds_angular.Services.Interfaces.ICongregationService" mapTo="crds_angular.Services.CongregationService" />
    <register type="crds_angular.Services.Interfaces.IRoomService" mapTo="crds_angular.Services.RoomService" />
    <register type="crds_angular.Services.Interfaces.IStaffContactService" mapTo="crds_angular.Services.StaffContactService" />
    <register type="crds_angular.Services.Interfaces.IEquipmentService" mapTo="crds_angular.Services.EquipmentService" />
    <register type="crds_angular.Services.Interfaces.ITaskService" mapTo="crds_angular.Services.TaskService" />
    <register type="crds_angular.Services.Interfaces.IGoSkillsService" mapTo="crds_angular.Services.GoSkillsService" />
    <register type="crds_angular.Services.Interfaces.IGoVolunteerService" mapTo="crds_angular.Services.GoVolunteerService"/>
    <register type="crds_angular.Services.Interfaces.IGroupConnectorService" mapTo="crds_angular.Services.GroupConnectorService"/>
    <register type="crds_angular.Services.Interfaces.IGroupToolService" mapTo="crds_angular.Services.GroupToolService">
      <constructor>
        <param name="groupToolRepository"/>
        <param name="groupRepository"/>
        <param name="groupService"/>
        <param name="participantRepository"/>
        <param name="communicationRepository"/>
        <param name="contentBlockService"/>
        <param name="configurationWrapper"/>
        <param name="invitationRepository"/>
        <param name="addressProximityService">
          <dependency name="geocodeProximityService" />
        </param>
        <param name="contactRepository"/>
        <param name="addressMatrixService">
          <dependency name="googleMapsProximityService" />
        </param>
      </constructor>
    </register>
    <register type="crds_angular.Services.Interfaces.IInvitationService" mapTo="crds_angular.Services.InvitationService"/>
    <!--<register type="crds_angular.Services.Interfaces.IAddressProximityService" mapTo="crds_angular.Services.GoogleMapsDistanceMatrixAddressProximityService"/>-->
    <register type="crds_angular.Services.Interfaces.IAddressGeocodingService" mapTo="crds_angular.Services.GoogleMapsAddressGeocodingService"/>

    <register name="googleMapsProximityService" type="crds_angular.Services.Interfaces.IAddressProximityService" mapTo="crds_angular.Services.GoogleMapsDistanceMatrixAddressProximityService">
      <lifetime type="PerResolveLifetimeManager"/>
      <constructor>
        <param name="mapsApiClient"/>
        <param name="addressGeocodingService"/>
      </constructor>
    </register>
    <register name="geocodeProximityService" type="crds_angular.Services.Interfaces.IAddressProximityService" mapTo="crds_angular.Services.GeocodeCalculationAddressProximityService">
      <lifetime type="PerResolveLifetimeManager"/>
      <constructor>
        <param name="addressGeocodingService"/>
      </constructor>
    </register>
    
    <!--Ministry Platform Translation Repositories-->
    <register type="MinistryPlatform.Translation.Repositories.Interfaces.IAddressRepository" mapTo="MinistryPlatform.Translation.Repositories.AddressRepository" />
    <register type="MinistryPlatform.Translation.Repositories.Interfaces.IAttributeRepository" mapTo="MinistryPlatform.Translation.Repositories.AttributeRepository" />
    <register type="MinistryPlatform.Translation.Repositories.Interfaces.IAuthenticationRepository" mapTo="MinistryPlatform.Translation.Repositories.AuthenticationServiceImpl" />
    <register type="MinistryPlatform.Translation.Repositories.Interfaces.ICampaignRepository" mapTo="MinistryPlatform.Translation.Repositories.CampaignRepository"/>
    <register type="MinistryPlatform.Translation.Repositories.Interfaces.ICommunicationRepository" mapTo="MinistryPlatform.Translation.Repositories.CommunicationRepository" />
    <register type="MinistryPlatform.Translation.Repositories.Interfaces.IObjectAttributeRepository" mapTo="MinistryPlatform.Translation.Repositories.ObjectAttributeRepository" />
    <register type="MinistryPlatform.Translation.Repositories.Interfaces.IContactRepository" mapTo="MinistryPlatform.Translation.Repositories.ContactRepository" />
    <register type="MinistryPlatform.Translation.Repositories.Interfaces.IContactRelationshipRepository" mapTo="MinistryPlatform.Translation.Repositories.ContactRelationshipRepository" />
    <register type="MinistryPlatform.Translation.Repositories.Interfaces.IDestinationRepository" mapTo="MinistryPlatform.Translation.Repositories.DestinationRepository" />
    <register type="MinistryPlatform.Translation.Repositories.Interfaces.IUserRepository" mapTo="MinistryPlatform.Translation.Repositories.UserRepository" />
    <register type="MinistryPlatform.Translation.Repositories.Interfaces.IDonationRepository" mapTo="MinistryPlatform.Translation.Repositories.DonationRepository" />
    <register type="MinistryPlatform.Translation.Repositories.Interfaces.IDonorRepository" mapTo="MinistryPlatform.Translation.Repositories.DonorRepository" />
    <register type="MinistryPlatform.Translation.Repositories.Interfaces.IEventParticipantRepository" mapTo="MinistryPlatform.Translation.Repositories.EventParticipantRepository" />
    <register type="MinistryPlatform.Translation.Repositories.Interfaces.IEventRepository" mapTo="MinistryPlatform.Translation.Repositories.EventRepository" />
    <register type="MinistryPlatform.Translation.Repositories.Interfaces.ISkillsRepository" mapTo="MinistryPlatform.Translation.Repositories.SkillsRepository" />
    <register type="MinistryPlatform.Translation.Repositories.Interfaces.IFormSubmissionRepository" mapTo="MinistryPlatform.Translation.Repositories.FormSubmissionRepository">
      <constructor>
        <param name="ministryPlatformService">
          <dependency type="MinistryPlatform.Translation.Repositories.Interfaces.IMinistryPlatformService"/>
        </param>
        <param name="dbConnection">
          <value value="MinistryPlatformDatabase"
                 typeConverter="MinistryPlatform.Translation.Utils.DbConnectionNameTypeConverter" />
        </param>
        <param name="authenticationService">
          <dependency type="MinistryPlatform.Translation.Repositories.Interfaces.IAuthenticationRepository"/>
        </param>
        <param name="configurationWrapper">
          <dependency type="Crossroads.Utilities.Interfaces.IConfigurationWrapper"/>
        </param>
      </constructor>
    </register>
    <register type="MinistryPlatform.Translation.Repositories.Interfaces.ITripRepository" mapTo="MinistryPlatform.Translation.Repositories.TripRepository">
      <constructor>
        <param name="ministryPlatformRestRepository">
          <dependency type="MinistryPlatform.Translation.Repositories.Interfaces.IMinistryPlatformRestRepository"/>
        </param>
        <param name="configurationWrapper">
          <dependency type="Crossroads.Utilities.Interfaces.IConfigurationWrapper"/>
        </param>
      </constructor>
    </register>
    <register type="MinistryPlatform.Translation.Repositories.Interfaces.IGroupRepository" mapTo="MinistryPlatform.Translation.Repositories.GroupRepository" />
    <register type="MinistryPlatform.Translation.Repositories.Interfaces.IGroupParticipantRepository" mapTo="MinistryPlatform.Translation.Repositories.GroupParticipantRepository">
      <constructor>
        <param name="dbConnection">
          <value value="MinistryPlatformDatabase"
                 typeConverter="MinistryPlatform.Translation.Utils.DbConnectionNameTypeConverter" />
        </param>
        <param name="configurationWrapper">
          <dependency type="Crossroads.Utilities.Interfaces.IConfigurationWrapper"/>
        </param>
        <param name="ministryPlatformService">
          <dependency type="MinistryPlatform.Translation.Repositories.Interfaces.IMinistryPlatformService"/>
        </param>
        <param name="apiUserService">
          <dependency type="MinistryPlatform.Translation.Repositories.Interfaces.IApiUserRepository"/>
        </param>
      </constructor>
    </register>

    <register type="MinistryPlatform.Translation.Repositories.Interfaces.IApiUserRepository" mapTo="MinistryPlatform.Translation.Repositories.ApiUserRepository" />
    <register type="MinistryPlatform.Translation.Repositories.Interfaces.IBulkEmailRepository" mapTo="MinistryPlatform.Translation.Repositories.BulkEmailRepository" />
    <register type="MinistryPlatform.Translation.Repositories.Interfaces.IMinistryPlatformService" mapTo="MinistryPlatform.Translation.Repositories.MinistryPlatformServiceImpl" />
    <register type="MinistryPlatform.Translation.Repositories.Interfaces.IMinistryPlatformRestRepository" mapTo="MinistryPlatform.Translation.Repositories.MinistryPlatformRestRepository">
      <constructor>
        <param name="ministryPlatformRestClient">
          <dependency name="ministryPlatformRest"/>
        </param>
      </constructor>
    </register>

    <register type="MinistryPlatform.Translation.Repositories.Interfaces.IOpportunityRepository" mapTo="MinistryPlatform.Translation.Repositories.OpportunityRepository" />
    <register type="MinistryPlatform.Translation.Repositories.Interfaces.IParticipantRepository" mapTo="MinistryPlatform.Translation.Repositories.ParticipantRepository" />
    <register type="MinistryPlatform.Translation.Repositories.Interfaces.IPledgeRepository" mapTo="MinistryPlatform.Translation.Repositories.PledgeRepository" />
    <register type="MinistryPlatform.Translation.Repositories.Interfaces.IProgramRepository" mapTo="MinistryPlatform.Translation.Repositories.ProgramRepository" />
    <register type="MinistryPlatform.Translation.Repositories.Interfaces.IPrivateInviteRepository" mapTo="MinistryPlatform.Translation.Repositories.PrivateInviteRepository"/>
    <register type="MinistryPlatform.Translation.Repositories.Interfaces.IResponseRepository" mapTo="MinistryPlatform.Translation.Repositories.ResponseRepository" />
    <register type="MinistryPlatform.Translation.Repositories.Interfaces.ICongregationRepository" mapTo="MinistryPlatform.Translation.Repositories.CongregationRepository" />
    <register type="MinistryPlatform.Translation.Repositories.Interfaces.IRoomRepository" mapTo="MinistryPlatform.Translation.Repositories.RoomRepository" />
    <register type="MinistryPlatform.Translation.Repositories.Interfaces.IEquipmentRepository" mapTo="MinistryPlatform.Translation.Repositories.EquipmentRepository" />
    <register type="MinistryPlatform.Translation.Repositories.Interfaces.ILookupRepository" mapTo="MinistryPlatform.Translation.Repositories.LookupRepository" />
    <register type="MinistryPlatform.Translation.Repositories.Interfaces.IProjectTypeRepository" mapTo="MinistryPlatform.Translation.Repositories.ProjectTypeRepository" />

    <!-- Configuration Wrapper -->
    <register type="Crossroads.Utilities.Interfaces.IConfigurationWrapper" mapTo="Crossroads.Utilities.Services.ConfigurationWrapper" />

    <!-- 3DES Encryption Provider -->
    <register type="Crossroads.Utilities.Interfaces.ICryptoProvider"
              mapTo="Crossroads.Utilities.Services.TripleDesSymmetricKeyCryptoProvider">
      <constructor>
        <param name="base64EncodedKey">
          <value value="EZSCAN_DB_SECRET_KEY" typeConverter="Crossroads.Utilities.Services.EnvironmentVariableTypeConverter" />
        </param>
        <param name="cipherMode">
          <value value="ECB" typeConverter="Crossroads.Utilities.Services.EnumTypeConverter[System.Security.Cryptography.CipherMode]" />
        </param>
        <param name="paddingMode">
          <value value="PKCS7" typeConverter="Crossroads.Utilities.Services.EnumTypeConverter[System.Security.Cryptography.PaddingMode]"/>
        </param>
      </constructor>
    </register>

    <!-- Content Block Service (for CMS messages) -->
    <register type="Crossroads.Utilities.Interfaces.IContentBlockService"
              mapTo="Crossroads.Utilities.Services.ContentBlockService">
      <lifetime type="ContainerControlledLifetimeManager"/>
      <constructor>
        <param name="cmsRestClient">
          <dependency name="cmsRestClient"/>
        </param>
      </constructor>
    </register>

    <register name="ministryPlatformRest" type="RestSharp.IRestClient" mapTo="RestSharp.RestClient">
      <constructor>
        <param name="baseUrl" type="string">
          <value value="MP_REST_API_ENDPOINT" typeConverter="Crossroads.Utilities.Services.EnvironmentVariableTypeConverter" />
        </param>
      </constructor>
    </register>
    
    <register name="cmsRestClient" type="RestSharp.IRestClient" mapTo="RestSharp.RestClient">
      <constructor>
        <param name="baseUrl" type="string">
          <value value="CRDS_CMS_ENDPOINT" typeConverter="Crossroads.Utilities.Services.EnvironmentVariableTypeConverter" />
        </param>
      </constructor>
    </register>

    <register type="crds_angular.Services.Interfaces.IPaymentService" mapTo="crds_angular.Services.StripeService">
      <constructor>
        <param name="stripeRestClient">
          <dependency name="stripeRestClient" />
        </param>
        <param name="configuration">
          <dependency type="Crossroads.Utilities.Interfaces.IConfigurationWrapper"/>
        </param>
        <param name="contentBlockService">
          <dependency type="Crossroads.Utilities.Interfaces.IContentBlockService"/>
        </param>
      </constructor>
    </register>

    <register name="stripeRestClient" type="RestSharp.IRestClient" mapTo="RestSharp.RestClient">
      <constructor>
        <param name="baseUrl" type="string">
          <value value="PaymentClient" typeConverter="Crossroads.Utilities.Services.AppSettingsTypeConverter" />
        </param>
      </constructor>
      <property name="Authenticator">
        <dependency name="stripeAuthenticator" />
      </property>
    </register>
    <register name="stripeAuthenticator" type="RestSharp.IAuthenticator" mapTo="RestSharp.HttpBasicAuthenticator">
      <constructor>
        <param name="username">
          <value value="STRIPE_AUTH_TOKEN"
                 typeConverter="Crossroads.Utilities.Services.EnvironmentVariableTypeConverter" />
        </param>
        <!-- TODO I really need to set this to null, but Unity doesn't like that, so sending spaces for now -->
        <param name="password" value="  " />
      </constructor>
    </register>

    <!-- Google Maps API -->
    <register type="GoogleMapsAPI.NET.API.Client.Interfaces.IMapsAPIClient" mapTo="GoogleMapsAPI.NET.API.Client.MapsAPIClient">
      <constructor>
        <param name="apiKey">
          <value value="GOOGLE_API_SECRET_KEY"
                 typeConverter="Crossroads.Utilities.Services.EnvironmentVariableTypeConverter" />
        </param>
      </constructor>
    </register>
    
    <!-- Register a per-resolve MP PlatformServiceClient -->
    <register type="MinistryPlatform.Translation.PlatformService.PlatformServiceClient">
      <lifetime type="PerResolveLifetimeManager" />
      <constructor></constructor>
    </register>
  </container>
</unity>
